გავმართოთ ავტორიზაცია
import React, { useState } from "react";
import "./auth.css";
import Header from "./Header";
import { registerUser, loginUser } from "../api"; // Import the API functions
import { useNavigate } from 'react-router-dom'; // For navigation after login

const AuthOverlay = ({ onClose }) => {
  const [isRegistering, setIsRegistering] = useState(false);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const navigate = useNavigate(); // Using react-router-dom's useNavigate for redirection

  const [error, setError] = useState(""); // Error state for feedback

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(""); // Clear previous errors

    // Validation for registration (all fields required)
    if (isRegistering) {
      if (!username || !email || !password) {
        setError("ყველა ველი უნდა იყოს შევსებული.");
        return;
      }
      if (password !== confirmPassword) {
        setError("პაროლები არ ემთხვევა");
        return;
      }

      try {
        const response = await registerUser(username, password, email);
        onClose(); // Close the overlay after the form is submitted
      } catch (error) {
        setError("შეცდომა! სცადეთ თავიდან.");
      }
    } else {
      // Validation for login
      if (!username && !email) {
        setError("შეიყვანეთ ან მომხმარებლის სახელი, ან ელ.ფოსტა.");
        return;
      }

      try {
        const response = await loginUser(username, email, password);
        if (response.token) {
          // Store token in localStorage
          localStorage.setItem('authToken', response.token);

          // Redirect to Dashboard after successful login
          onClose(); // Close the auth overlay
          navigate("/dashboard"); // Navigate to the dashboard page
          window.location.reload(); // Reload the page to reflect the successful login
        } else {
          setError("შეცდომა");
        }
      } catch (error) {
        setError("შეცდომა! სცადეთ თავიდან.");
      }
    }
  };

  return (
    <div className="expanded-auth">
      <div className="content-header">
        <Header />
      </div>
      <div className="auth-box">
        <button className="closes" onClick={onClose}>X</button>
        <h2>{isRegistering ? "რეგისტრაცია" : "ავტორიზაცია"}</h2>

        {/* Display error if any */}
        {error && <div className="error-message">{error}</div>}

        <form className="auth" onSubmit={handleSubmit}>
          <input 
            type="text" 
            placeholder="მომხმარებლის სახელი" 
            required={isRegistering}  
            value={username} 
            onChange={(e) => setUsername(e.target.value)} 
          />
          <input 
            type="password" 
            placeholder="პაროლი" 
            required={isRegistering}  
            value={password} 
            onChange={(e) => setPassword(e.target.value)} 
          />
          
          {isRegistering && (
            <>
              <input 
                type="email" 
                placeholder="ელ. ფოსტა" 
                required
                value={email} 
                onChange={(e) => setEmail(e.target.value)} 
              />
              <input 
                type="password" 
                placeholder="გაიმეორეთ პაროლი" 
                required
                value={confirmPassword} 
                onChange={(e) => setConfirmPassword(e.target.value)} 
              />
            </>
          )}

          <div className="buttons-user">
            <button type="submit">{isRegistering ? "რეგისტრაცია" : "ავტორიზაცია"}</button>
            <button 
              type="button" 
              onClick={() => setIsRegistering(!isRegistering)}  
              className="toggle-button"
            >
              {isRegistering ? "ავტორიზაცია" : "რეგისტრაცია"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AuthOverlay;
import { createContext, useState, useEffect } from "react";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem('authToken');
    if (token) {
      // Optional: You can verify the token from the server
      const fetchedUser = { username: "Admin" }; // Example of mocked user
      setUser(fetchedUser);
    }
  }, []);

  const login = (userData) => {
    setUser(userData);
  };

  const logout = () => {
    localStorage.removeItem('authToken');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../db');
const router = express.Router();

// Registration route
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    db.query(
      'INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
      [username, email, hashedPassword],
      (err, result) => {
        if (err) {
          return res.status(500).json({ message: 'Error registering user' });
        }
        res.status(200).json({ message: 'User registered successfully' });
      }
    );
  } catch (error) {
    res.status(500).json({ message: 'Error during registration' });
  }
});

// Login route
router.post('/login', (req, res) => {
  const { username, email, password } = req.body;

  const query = username ? 
    'SELECT * FROM users WHERE username = ?' : 
    'SELECT * FROM users WHERE email = ?';

  const value = username || email;

  db.query(query, [value], async (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Database error' });
    }

    if (result.length === 0) {
      return res.status(400).json({ message: 'User not found' });
    }

    const validPassword = await bcrypt.compare(password, result[0].password);
    if (!validPassword) {
      return res.status(400).json({ message: 'Invalid password' });
    }

    const token = jwt.sign({ userId: result[0].id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ token });
  });
});

module.exports = router;
const mysql = require('mysql');

const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '', // შენი პაროლი
  database: 'mybase' // შენი ბაზის სახელი
});

db.connect((err) => {
  if (err) {
    console.error('Error connecting to the database:', err);
  } else {
    console.log('Connected to the database');
  }
});

module.exports = db;


